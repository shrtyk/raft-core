// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.1
// source: raft.proto

package raftpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int64                  `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Cmd           []byte                 `protobuf:"bytes,2,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_raft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{0}
}

func (x *LogEntry) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LogEntry) GetCmd() []byte {
	if x != nil {
		return x.Cmd
	}
	return nil
}

type RaftPersistentState struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CurrentTerm       int64                  `protobuf:"varint,1,opt,name=CurrentTerm,proto3" json:"CurrentTerm,omitempty"`
	VotedFor          int64                  `protobuf:"varint,2,opt,name=VotedFor,proto3" json:"VotedFor,omitempty"`
	Log               []*LogEntry            `protobuf:"bytes,3,rep,name=Log,proto3" json:"Log,omitempty"`
	LastIncludedIndex int64                  `protobuf:"varint,4,opt,name=LastIncludedIndex,proto3" json:"LastIncludedIndex,omitempty"`
	LastIncludedTerm  int64                  `protobuf:"varint,5,opt,name=LastIncludedTerm,proto3" json:"LastIncludedTerm,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RaftPersistentState) Reset() {
	*x = RaftPersistentState{}
	mi := &file_raft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftPersistentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftPersistentState) ProtoMessage() {}

func (x *RaftPersistentState) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftPersistentState.ProtoReflect.Descriptor instead.
func (*RaftPersistentState) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{1}
}

func (x *RaftPersistentState) GetCurrentTerm() int64 {
	if x != nil {
		return x.CurrentTerm
	}
	return 0
}

func (x *RaftPersistentState) GetVotedFor() int64 {
	if x != nil {
		return x.VotedFor
	}
	return 0
}

func (x *RaftPersistentState) GetLog() []*LogEntry {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *RaftPersistentState) GetLastIncludedIndex() int64 {
	if x != nil {
		return x.LastIncludedIndex
	}
	return 0
}

func (x *RaftPersistentState) GetLastIncludedTerm() int64 {
	if x != nil {
		return x.LastIncludedTerm
	}
	return 0
}

type InstallSnapshotRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Term              int64                  `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderId          int64                  `protobuf:"varint,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	LastIncludedIndex int64                  `protobuf:"varint,3,opt,name=LastIncludedIndex,proto3" json:"LastIncludedIndex,omitempty"`
	LastIncludedTerm  int64                  `protobuf:"varint,4,opt,name=LastIncludedTerm,proto3" json:"LastIncludedTerm,omitempty"`
	Data              []byte                 `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InstallSnapshotRequest) Reset() {
	*x = InstallSnapshotRequest{}
	mi := &file_raft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallSnapshotRequest) ProtoMessage() {}

func (x *InstallSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallSnapshotRequest.ProtoReflect.Descriptor instead.
func (*InstallSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{2}
}

func (x *InstallSnapshotRequest) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *InstallSnapshotRequest) GetLeaderId() int64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *InstallSnapshotRequest) GetLastIncludedIndex() int64 {
	if x != nil {
		return x.LastIncludedIndex
	}
	return 0
}

func (x *InstallSnapshotRequest) GetLastIncludedTerm() int64 {
	if x != nil {
		return x.LastIncludedTerm
	}
	return 0
}

func (x *InstallSnapshotRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type InstallSnapshotResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int64                  `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstallSnapshotResponse) Reset() {
	*x = InstallSnapshotResponse{}
	mi := &file_raft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstallSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallSnapshotResponse) ProtoMessage() {}

func (x *InstallSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallSnapshotResponse.ProtoReflect.Descriptor instead.
func (*InstallSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{3}
}

func (x *InstallSnapshotResponse) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

type RequestVoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int64                  `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	CandidateId   int64                  `protobuf:"varint,2,opt,name=CandidateId,proto3" json:"CandidateId,omitempty"`
	LastLogIndex  int64                  `protobuf:"varint,3,opt,name=LastLogIndex,proto3" json:"LastLogIndex,omitempty"`
	LastLogTerm   int64                  `protobuf:"varint,4,opt,name=LastLogTerm,proto3" json:"LastLogTerm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteRequest) Reset() {
	*x = RequestVoteRequest{}
	mi := &file_raft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteRequest) ProtoMessage() {}

func (x *RequestVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteRequest.ProtoReflect.Descriptor instead.
func (*RequestVoteRequest) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{4}
}

func (x *RequestVoteRequest) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteRequest) GetCandidateId() int64 {
	if x != nil {
		return x.CandidateId
	}
	return 0
}

func (x *RequestVoteRequest) GetLastLogIndex() int64 {
	if x != nil {
		return x.LastLogIndex
	}
	return 0
}

func (x *RequestVoteRequest) GetLastLogTerm() int64 {
	if x != nil {
		return x.LastLogTerm
	}
	return 0
}

type RequestVoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int64                  `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	VoterId       int64                  `protobuf:"varint,2,opt,name=VoterId,proto3" json:"VoterId,omitempty"`
	VoteGranted   bool                   `protobuf:"varint,3,opt,name=VoteGranted,proto3" json:"VoteGranted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteResponse) Reset() {
	*x = RequestVoteResponse{}
	mi := &file_raft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteResponse) ProtoMessage() {}

func (x *RequestVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteResponse.ProtoReflect.Descriptor instead.
func (*RequestVoteResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{5}
}

func (x *RequestVoteResponse) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteResponse) GetVoterId() int64 {
	if x != nil {
		return x.VoterId
	}
	return 0
}

func (x *RequestVoteResponse) GetVoteGranted() bool {
	if x != nil {
		return x.VoteGranted
	}
	return false
}

type AppendEntriesRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Term              int64                  `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderId          int64                  `protobuf:"varint,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	PrevLogTerm       int64                  `protobuf:"varint,3,opt,name=PrevLogTerm,proto3" json:"PrevLogTerm,omitempty"`
	PrevLogIndex      int64                  `protobuf:"varint,4,opt,name=PrevLogIndex,proto3" json:"PrevLogIndex,omitempty"`
	LeaderCommitIndex int64                  `protobuf:"varint,5,opt,name=LeaderCommitIndex,proto3" json:"LeaderCommitIndex,omitempty"`
	Entries           []*LogEntry            `protobuf:"bytes,6,rep,name=Entries,proto3" json:"Entries,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AppendEntriesRequest) Reset() {
	*x = AppendEntriesRequest{}
	mi := &file_raft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesRequest) ProtoMessage() {}

func (x *AppendEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesRequest.ProtoReflect.Descriptor instead.
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{6}
}

func (x *AppendEntriesRequest) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntriesRequest) GetLeaderId() int64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *AppendEntriesRequest) GetPrevLogTerm() int64 {
	if x != nil {
		return x.PrevLogTerm
	}
	return 0
}

func (x *AppendEntriesRequest) GetPrevLogIndex() int64 {
	if x != nil {
		return x.PrevLogIndex
	}
	return 0
}

func (x *AppendEntriesRequest) GetLeaderCommitIndex() int64 {
	if x != nil {
		return x.LeaderCommitIndex
	}
	return 0
}

func (x *AppendEntriesRequest) GetEntries() []*LogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int64                  `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	ConflictIndex int64                  `protobuf:"varint,3,opt,name=ConflictIndex,proto3" json:"ConflictIndex,omitempty"`
	ConflictTerm  int64                  `protobuf:"varint,4,opt,name=ConflictTerm,proto3" json:"ConflictTerm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendEntriesResponse) Reset() {
	*x = AppendEntriesResponse{}
	mi := &file_raft_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesResponse) ProtoMessage() {}

func (x *AppendEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raft_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesResponse.ProtoReflect.Descriptor instead.
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) {
	return file_raft_proto_rawDescGZIP(), []int{7}
}

func (x *AppendEntriesResponse) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntriesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AppendEntriesResponse) GetConflictIndex() int64 {
	if x != nil {
		return x.ConflictIndex
	}
	return 0
}

func (x *AppendEntriesResponse) GetConflictTerm() int64 {
	if x != nil {
		return x.ConflictTerm
	}
	return 0
}

var File_raft_proto protoreflect.FileDescriptor

const file_raft_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"raft.proto\x12\araft.v1\"0\n" +
	"\bLogEntry\x12\x12\n" +
	"\x04Term\x18\x01 \x01(\x03R\x04Term\x12\x10\n" +
	"\x03Cmd\x18\x02 \x01(\fR\x03Cmd\"\xd2\x01\n" +
	"\x13RaftPersistentState\x12 \n" +
	"\vCurrentTerm\x18\x01 \x01(\x03R\vCurrentTerm\x12\x1a\n" +
	"\bVotedFor\x18\x02 \x01(\x03R\bVotedFor\x12#\n" +
	"\x03Log\x18\x03 \x03(\v2\x11.raft.v1.LogEntryR\x03Log\x12,\n" +
	"\x11LastIncludedIndex\x18\x04 \x01(\x03R\x11LastIncludedIndex\x12*\n" +
	"\x10LastIncludedTerm\x18\x05 \x01(\x03R\x10LastIncludedTerm\"\xb6\x01\n" +
	"\x16InstallSnapshotRequest\x12\x12\n" +
	"\x04Term\x18\x01 \x01(\x03R\x04Term\x12\x1a\n" +
	"\bLeaderId\x18\x02 \x01(\x03R\bLeaderId\x12,\n" +
	"\x11LastIncludedIndex\x18\x03 \x01(\x03R\x11LastIncludedIndex\x12*\n" +
	"\x10LastIncludedTerm\x18\x04 \x01(\x03R\x10LastIncludedTerm\x12\x12\n" +
	"\x04Data\x18\x05 \x01(\fR\x04Data\"-\n" +
	"\x17InstallSnapshotResponse\x12\x12\n" +
	"\x04Term\x18\x01 \x01(\x03R\x04Term\"\x90\x01\n" +
	"\x12RequestVoteRequest\x12\x12\n" +
	"\x04Term\x18\x01 \x01(\x03R\x04Term\x12 \n" +
	"\vCandidateId\x18\x02 \x01(\x03R\vCandidateId\x12\"\n" +
	"\fLastLogIndex\x18\x03 \x01(\x03R\fLastLogIndex\x12 \n" +
	"\vLastLogTerm\x18\x04 \x01(\x03R\vLastLogTerm\"e\n" +
	"\x13RequestVoteResponse\x12\x12\n" +
	"\x04Term\x18\x01 \x01(\x03R\x04Term\x12\x18\n" +
	"\aVoterId\x18\x02 \x01(\x03R\aVoterId\x12 \n" +
	"\vVoteGranted\x18\x03 \x01(\bR\vVoteGranted\"\xe7\x01\n" +
	"\x14AppendEntriesRequest\x12\x12\n" +
	"\x04Term\x18\x01 \x01(\x03R\x04Term\x12\x1a\n" +
	"\bLeaderId\x18\x02 \x01(\x03R\bLeaderId\x12 \n" +
	"\vPrevLogTerm\x18\x03 \x01(\x03R\vPrevLogTerm\x12\"\n" +
	"\fPrevLogIndex\x18\x04 \x01(\x03R\fPrevLogIndex\x12,\n" +
	"\x11LeaderCommitIndex\x18\x05 \x01(\x03R\x11LeaderCommitIndex\x12+\n" +
	"\aEntries\x18\x06 \x03(\v2\x11.raft.v1.LogEntryR\aEntries\"\x8f\x01\n" +
	"\x15AppendEntriesResponse\x12\x12\n" +
	"\x04Term\x18\x01 \x01(\x03R\x04Term\x12\x18\n" +
	"\aSuccess\x18\x02 \x01(\bR\aSuccess\x12$\n" +
	"\rConflictIndex\x18\x03 \x01(\x03R\rConflictIndex\x12\"\n" +
	"\fConflictTerm\x18\x04 \x01(\x03R\fConflictTerm2\xfd\x01\n" +
	"\vRaftService\x12T\n" +
	"\x0fInstallSnapshot\x12\x1f.raft.v1.InstallSnapshotRequest\x1a .raft.v1.InstallSnapshotResponse\x12H\n" +
	"\vRequestVote\x12\x1b.raft.v1.RequestVoteRequest\x1a\x1c.raft.v1.RequestVoteResponse\x12N\n" +
	"\rAppendEntries\x12\x1d.raft.v1.AppendEntriesRequest\x1a\x1e.raft.v1.AppendEntriesResponseB7Z5github.com/shrtyk/raft-core/internal/proto/gen;raftpbb\x06proto3"

var (
	file_raft_proto_rawDescOnce sync.Once
	file_raft_proto_rawDescData []byte
)

func file_raft_proto_rawDescGZIP() []byte {
	file_raft_proto_rawDescOnce.Do(func() {
		file_raft_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_raft_proto_rawDesc), len(file_raft_proto_rawDesc)))
	})
	return file_raft_proto_rawDescData
}

var file_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_raft_proto_goTypes = []any{
	(*LogEntry)(nil),                // 0: raft.v1.LogEntry
	(*RaftPersistentState)(nil),     // 1: raft.v1.RaftPersistentState
	(*InstallSnapshotRequest)(nil),  // 2: raft.v1.InstallSnapshotRequest
	(*InstallSnapshotResponse)(nil), // 3: raft.v1.InstallSnapshotResponse
	(*RequestVoteRequest)(nil),      // 4: raft.v1.RequestVoteRequest
	(*RequestVoteResponse)(nil),     // 5: raft.v1.RequestVoteResponse
	(*AppendEntriesRequest)(nil),    // 6: raft.v1.AppendEntriesRequest
	(*AppendEntriesResponse)(nil),   // 7: raft.v1.AppendEntriesResponse
}
var file_raft_proto_depIdxs = []int32{
	0, // 0: raft.v1.RaftPersistentState.Log:type_name -> raft.v1.LogEntry
	0, // 1: raft.v1.AppendEntriesRequest.Entries:type_name -> raft.v1.LogEntry
	2, // 2: raft.v1.RaftService.InstallSnapshot:input_type -> raft.v1.InstallSnapshotRequest
	4, // 3: raft.v1.RaftService.RequestVote:input_type -> raft.v1.RequestVoteRequest
	6, // 4: raft.v1.RaftService.AppendEntries:input_type -> raft.v1.AppendEntriesRequest
	3, // 5: raft.v1.RaftService.InstallSnapshot:output_type -> raft.v1.InstallSnapshotResponse
	5, // 6: raft.v1.RaftService.RequestVote:output_type -> raft.v1.RequestVoteResponse
	7, // 7: raft.v1.RaftService.AppendEntries:output_type -> raft.v1.AppendEntriesResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_raft_proto_init() }
func file_raft_proto_init() {
	if File_raft_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_raft_proto_rawDesc), len(file_raft_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_raft_proto_goTypes,
		DependencyIndexes: file_raft_proto_depIdxs,
		MessageInfos:      file_raft_proto_msgTypes,
	}.Build()
	File_raft_proto = out.File
	file_raft_proto_goTypes = nil
	file_raft_proto_depIdxs = nil
}
